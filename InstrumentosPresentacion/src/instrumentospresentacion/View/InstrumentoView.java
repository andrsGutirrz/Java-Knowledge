/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package instrumentospresentacion.View;

import instrumentosEntidades.Instrumento;
import instrumentosEntidades.TipoInstrumento;
import instrumentospresentacion.Control.InstrumentoControl;
import instrumentospresentacion.Model.InstrumentoModel;
import instrumentospresentacion.Principal;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;

/**
 *
 * @author marcovinicio
 */
public class InstrumentoView extends javax.swing.JInternalFrame implements Observer {

    /**
     * Creates new form Instrumento
     */
    public InstrumentoView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        SerieLb = new javax.swing.JLabel();
        TipoLb = new javax.swing.JLabel();
        DescripcionLb = new javax.swing.JLabel();
        MinimoLb = new javax.swing.JLabel();
        MaximoLb = new javax.swing.JLabel();
        ToleranciaLb = new javax.swing.JLabel();
        SerieField = new javax.swing.JTextField();
        DescripcionField = new javax.swing.JTextField();
        TipoComboBox = new javax.swing.JComboBox();
        MinField = new javax.swing.JTextField();
        MaxField = new javax.swing.JTextField();
        ToleranciaField = new javax.swing.JTextField();
        SaveBT = new javax.swing.JButton();
        CancelBT = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        SerieLb.setText("Serie");

        TipoLb.setText("Tipo");

        DescripcionLb.setText("Descripcion");

        MinimoLb.setText("Minimo");

        MaximoLb.setText("Maximo");

        ToleranciaLb.setText("Tolerancia");

        SaveBT.setText("Save");
        SaveBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBTActionPerformed(evt);
            }
        });

        CancelBT.setText("Cancel");
        CancelBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SerieLb)
                                    .addComponent(TipoLb))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SerieField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ToleranciaLb)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ToleranciaField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(DescripcionLb)
                                        .addComponent(MinimoLb)
                                        .addComponent(MaximoLb))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(DescripcionField)
                                        .addComponent(MinField)
                                        .addComponent(MaxField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(SaveBT)
                        .addGap(42, 42, 42)
                        .addComponent(CancelBT)))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerieLb)
                    .addComponent(SerieField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipoLb)
                    .addComponent(TipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DescripcionLb)
                    .addComponent(DescripcionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MinimoLb)
                    .addComponent(MinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MaximoLb)
                    .addComponent(MaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ToleranciaLb)
                    .addComponent(ToleranciaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveBT)
                    .addComponent(CancelBT))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBTActionPerformed
      this.control.guardar();
    }//GEN-LAST:event_SaveBTActionPerformed

    private void CancelBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBTActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_CancelBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstrumentoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstrumentoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstrumentoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstrumentoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstrumentoView().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBT;
    public javax.swing.JTextField DescripcionField;
    private javax.swing.JLabel DescripcionLb;
    public javax.swing.JTextField MaxField;
    private javax.swing.JLabel MaximoLb;
    public javax.swing.JTextField MinField;
    private javax.swing.JLabel MinimoLb;
    private javax.swing.JButton SaveBT;
    public javax.swing.JTextField SerieField;
    private javax.swing.JLabel SerieLb;
    public javax.swing.JComboBox TipoComboBox;
    private javax.swing.JLabel TipoLb;
    public javax.swing.JTextField ToleranciaField;
    private javax.swing.JLabel ToleranciaLb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
InstrumentoControl control;
InstrumentoModel model;

//======================

    public InstrumentoControl getControl() {
        return control;
    }
    //-----------------------
    public void setControl(InstrumentoControl control) {
        this.control = control;
    }
    //-----------------------
    public InstrumentoModel getModel() {
        return model;
    }
    //-----------------------
    public void setModel(InstrumentoModel model) {
        this.model = model;
        model.addObserver(this);
    }
    //-----------------------
    @Override
    public void update(Observable o, Object arg) {
        Instrumento instrumentoCurrent = model.getCurrent();
        //-----Si el modo es agregar el espacio de serie estara habilitado de lo contrario no
       this.SerieField.setEnabled(model.getModo()==Principal.MODO_AGREGAR);
       //==================================
       SerieField.setText(instrumentoCurrent.getSerie());
       if (model.getErrores().get("serie")!=null){
            SerieLb.setBorder(Principal.BORDER_ERROR);
            SerieLb.setToolTipText(model.getErrores().get("serie"));
        }
        else{
            SerieLb.setBorder(null);
            SerieLb.setToolTipText("");
        }
        //==================================
        DescripcionField.setText(instrumentoCurrent.getDescripcion());
        if (model.getErrores().get("descripcion")!=null){
            DescripcionLb.setBorder(Principal.BORDER_ERROR);
            DescripcionLb.setToolTipText(model.getErrores().get("descripcion"));
        }
        else{
           DescripcionLb.setBorder(null);
           DescripcionLb.setToolTipText("");
        }
        //==================================
        MinField.setText(Integer.toString(instrumentoCurrent.getMinimo()));
        if (model.getErrores().get("minimo")!=null){
            MinimoLb.setBorder(Principal.BORDER_ERROR);
            MinimoLb.setToolTipText(model.getErrores().get("minimo"));
        }
        else{
           MinimoLb.setBorder(null);
           MinimoLb.setToolTipText("");
        }
        //==================================
        MaxField.setText(Integer.toString(instrumentoCurrent.getMaximo()));
        if (model.getErrores().get("maximo")!=null){
            MaximoLb.setBorder(Principal.BORDER_ERROR);
            MaximoLb.setToolTipText(model.getErrores().get("maximo"));
        }
        else{
           MaximoLb.setBorder(null);
           MaximoLb.setToolTipText("");
        }
        //==================================
        ToleranciaField.setText(Integer.toString(instrumentoCurrent.getTolerancia()));
        if (model.getErrores().get("tolerancia")!=null){
            ToleranciaLb.setBorder(Principal.BORDER_ERROR);
            ToleranciaLb.setToolTipText(model.getErrores().get("tolerancia"));
        }
        else{
           ToleranciaLb.setBorder(null);
           ToleranciaLb.setToolTipText("");
        }
        //==================================
        TipoComboBox.setModel(model.getTipos());
        TipoComboBox.setSelectedItem(instrumentoCurrent.getTipo());
        if (!model.getMensaje().equals("")){
            JOptionPane.showMessageDialog(this, model.getMensaje(), "",JOptionPane.INFORMATION_MESSAGE);
        }
    }


}
